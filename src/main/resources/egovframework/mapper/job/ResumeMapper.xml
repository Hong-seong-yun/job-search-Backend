<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="egovframework.mapper.job.ResumeMapper">

	<select id="selectResumeList" resultType="egovframework.job.dto.ResumeDTO">
        SELECT * FROM RESUME LIMIT 10
    </select>
    
    <!-- 회원별 이력서조회 -->
	<select id="memberResume" parameterType="Long" resultType="egovframework.job.dto.ResumeSearchResponse">
		SELECT R.r_id, R.education, R_R.region, R.job, R.payment_type, R.payment, R.ob_type, R.disease, R.career, R.pr, R.m_num, R.title
	    , (CASE
	      	WHEN R.r_id IN (
		        SELECT M.r_default
		        FROM MEMBER M
		        WHERE M.m_num = R.m_num
	      	) THEN 'True'
      	  	ELSE 'False'
    	  END) AS r_default
	    FROM RESUME R INNER JOIN RESUME_REGION R_R
	    ON R.r_id = R_R.r_id
	    <where>
	        <if test="memberId != null">
	            AND R.m_num = #{memberId}
	        </if>
    	</where>
    	GROUP BY R.r_id
	</select>

    <select id="selectResumeById" resultType="egovframework.job.dto.ResumeDTO">
        SELECT * FROM RESUME WHERE r_id = #{r_id}
    </select>

    <!-- 이력서 생성 -->
    <insert id="createResume" parameterType="egovframework.job.dto.ResumeDTO">
        INSERT INTO RESUME (job, payment_type, payment, ob_type, disease, career, pr, m_num, title, education)
        VALUES (
        #{job, jdbcType = VARCHAR}, 
        #{payment_type, jdbcType = VARCHAR}, 
        #{payment, jdbcType = INTEGER}, 
        #{ob_type, jdbcType = VARCHAR},
        #{disease, jdbcType = VARCHAR}, 
        #{career, jdbcType = VARCHAR}, 
        #{pr, jdbcType = VARCHAR}, 
        #{m_num, jdbcType = VARCHAR}, 
        #{title, jdbcType = VARCHAR}, 
        #{education, jdbcType = VARCHAR})
        
        <selectKey resultType="long" keyProperty="r_id" order="AFTER">
        	SELECT LAST_INSERT_ID()
    	</selectKey>
    </insert>
    
    <!-- 이력서 수정 -->
    <update id="updateResume" parameterType="egovframework.job.dto.ResumeDTO">
        UPDATE RESUME 
           <set>
		      <if test="education != null">
		        education = #{education},
		      </if>
		      <if test="job != null">
		        job = #{job},
		      </if>
		      <if test="payment_type != null">
		        payment_type = #{payment_type},
		      </if>
		      <if test="payment != null">
		        payment = #{payment},
		      </if>
		      <if test="ob_type != null">
		        ob_type = #{ob_type},
		      </if>
		      <if test="disease != null">
		        disease = #{disease},
		      </if>
		      <if test="career != null">
		        career = #{career},
		      </if>
		      <if test="pr != null">
		        pr = #{pr},
		      </if>
		      <if test="title != null">
		        title = #{title}
		      </if>
    		</set>
        WHERE r_id = #{r_id}
    </update>
    
    <!-- 이력서 삭제 -->
    <delete id="deleteResume" parameterType="Long">
        delete from RESUME where r_id=#{r_id}
    </delete>
    
    <!-- 이력서 조건검색 -->
    <select id="searchResume" resultType="egovframework.job.dto.ResumeSearchResponse" parameterType="egovframework.job.dto.ResumeSearchRequest">
      SELECT R.r_id, R.education, R_R.region, R.job, R.payment_type, R.payment, R.ob_type, R.disease, R.career, R.pr, R.m_num, R.title, 
      (SELECT M.name FROM MEMBER M WHERE M.m_num = R.m_num) AS name
      FROM RESUME R INNER JOIN RESUME_REGION R_R
      ON R.r_id = R_R.r_id
      <where>
         <if test="payment_type != null">
         	<if test="payment_type.length > 0">
               and R.payment_type in 
               <foreach item="ptype" collection="payment_type" open="(" close=")" separator="," >
                  #{ptype}
               </foreach>
            </if>
         </if>
         <if test="disease != null">
         	<if test="disease.length > 0">
               and R.disease in 
               <foreach item="d" collection="disease" open="(" close=")" separator="," >
                  #{d}
               </foreach>
            </if>
         </if>
         <if test="ob_type != null">
         	<if test="ob_type.length > 0">
               and R.ob_type in 
               <foreach item="ob" collection="ob_type" open="(" close=")" separator="," >
                  #{ob}
               </foreach>
            </if>
         </if>
         <if test="place != null">
         	<if test="place.length > 0">
               and R_R.region in 
               <foreach item="p" collection="place" open="(" close=")" separator="," >
                  #{p}
               </foreach>
            </if>
         </if>
         <if test="education != null">
         	<if test="education.length > 0">
               and R.education in 
               <foreach item="e" collection="education" open="(" close=")" separator="," >
                  #{e}
               </foreach>
            </if>
         </if>
         <if test="keyword != null">
         	<if test="keyword.length > 0">
         		and R.job LIKE CONCAT('%', #{keyword}, '%')
         	</if>
         </if>
      </where>
      GROUP BY R.r_id
      <choose>
         <when test="sort == '최신순'">
         	ORDER BY R.r_id DESC
         </when>
         <when test="sort == '희망임금순'">
            ORDER BY R.payment ASC
         </when>
      </choose>
   	</select>
</mapper>
